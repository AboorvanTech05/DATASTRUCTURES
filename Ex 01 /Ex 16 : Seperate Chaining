#include <stdio.h>
#include<stdlib.h>
#define MINSIZE 7
typedef int index;
typedef struct Node* position;
typedef struct Node*List;
typedef struct H_table* Hashtable;
struct Node
{
 int data;
 position next;
};
struct H_table
{
 int table_size;
 List* List_array;
};
int next_prime(int table_size)
{
 int i=table_size,f;
 while(1)
 {
 f=1;
 for(int j=2;j<i;j++)
 {
 if(i%j==0)
 {
 f=0;
 break;
 }
 }
 if(f==1)
 return i;
 i++;
 }
}
index Hash(int key,int table_size)
{
 return key % table_size;
}
Hashtable Create_table(int table_size)
{
 Hashtable H;
 if(table_size < MINSIZE)
 {
 printf("Table size too small");
 return NULL;
 }
 H=(Hashtable)malloc(sizeof(struct H_table));
 if(H==NULL)
 {
 printf("Out of space");
 return NULL;
 }
 H->table_size = next_prime(table_size);
 H->List_array = (List*) malloc(sizeof(List) * H->table_size);
 
 if(H->List_array==NULL)
 {
 printf("Out of space");
 return NULL;
 }
 for(int i=0;i< H->table_size;i++)
 {
 H->List_array[i]=(position)malloc(sizeof(struct Node));
 if(H->List_array[i]==NULL)
 {
 printf("Out of space");
 return NULL;
 }
 else
 {
 H->List_array[i]->next==NULL;
 }
 }
 return H;
}
position find(int key,Hashtable H)
{
 position p;
 List L;
 L=H->List_array[Hash(key,H->table_size)];
 p=L->next;
 while(p!=NULL && p->data!=key)
 p=p->next;
 return p;}
void insert(int key,Hashtable H)
{
 position p,new_cell;
 List L;
 p=find(key,H);
 if(p==NULL)
 {
 new_cell=(position)malloc(sizeof(struct Node));
 if(new_cell==NULL)
 printf("Out of space");
 else
 {
 new_cell->data=key;
 L=H->List_array[Hash(key,H->table_size)];
 new_cell->next=L->next;
 L->next=new_cell;
 }
 }
}
void display(Hashtable H){
for(int i=0;i<H->table_size;i++){
 List L=H->List_array[i];
 printf("%d => ",i);
 position p=L->next;
 while(p!=NULL)
 {
 printf("%d ",p->data);
 p=p->next;
 }
 printf("\n");
 }
}
int main()
{
 int size;
 printf("Enter size of the table: ");
 scanf("%d",&size);
 Hashtable H1=Create_table(size);
 printf("Hashtable Size: %d\n",H1->table_size);
 if(H1!=NULL)
 {
 int d,op;
 do
 {
 printf("\nChoose operation: 1) Insert 2) Display: ");
 scanf("%d",&op);
 switch(op)
 {
 case 1:
 printf("Enter the data to be inserted:");
 scanf("%d",&d);
 insert(d,H1);
 break;
 case 2:
 printf("\nSeparate Chaining hash table\n\n");
 display(H1);
 break;
 
 case 0:
 printf("Operation terminated");
 break;
 default:
 printf("Invalid operation\n");
 } 
 } while(op);
 }
}
